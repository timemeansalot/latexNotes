@MastersThesis{riscv1,
	author = {顾梦杰},
	title = {基于RISC-V指令集架构的通用微控制器设计},
	school = {东华大学},
	year = {2022},
	tertiaryauthor = {伍滨和},
	typeofwork = {硕士},
	keywords = {RISC-V;微控制器;处理器微架构;FPGA},
	abstract = {随着全球化“缺芯”潮的持续以及中美贸易战的愈演愈烈,实现微控制器(Microcontroller Unit,MCU)这一基础芯片产品的自主化不仅是维持社会、经济正常发展的重要前提,更是维护国家安全的基本保障。在此背景下,本文基于完全开源开放的第五代精简指令集架构——RISC-V,设计了一款面向低功耗嵌入式场景的微控制器。本课题首先完成了一款支持RV32IMC指令集的MCU核心处理器。该处理器基于两级变长流水线,支持静态分支预测,并配备了独立的高性能乘、除法模块。处理器总线接口采用ARM公司AMBA 5总线协议所定义的AHB-Lite总线,具有较好的兼容性与可扩展性。同时该处理器还支持由Si Five公司0.11版RISC-V系统调试方案所定义的调试模式,通过与So C中的调试模块配合能够支持系统调试与程序烧录。在完成核心设计的基础上,本课题使用AHB-Lite总线替换了开源蜂鸟E203项目的So C系统高速总线,并完成了上述So C与本课题所设计核心处理器的集成,实现了一款具有完整功能的低功耗MCU。完成微架构设计后,本课题搭建了Testbench测试平台。通过运行RISC-V官方提供的“I”、“M”、“C”指令集测试程序以及由C语言编写的Hello World程序,初步验证了所设计MCU对RISC-V架构程序的执行能力以及对中断、异常的处理能力。完成软件仿真的基础上,本课题还通过硬件实现进一步测试、评估此次设计。首先进行FPGA原型验证,运行了由C语言编写的功能测试程序以及Dhrystone、Core Mark跑分程序。在验证本设计硬件实现后功能正确性的基础上测试了设计的性能表现。本次设计获得了1.46 DMIPS/MHz以及2.7 Core Mark/MHz的跑分成绩,性能介于ARM Cortex-M23与ARM Cortex-M3之间。最后还基于中芯国际55纳米工艺完成了本次设计微控制器核心的硬件综合。在125MHz的时序约束下,本次设计的MCU核心处理器共包含22949个cell,cell总面积为50259。在1.08V电压下运行Dhrystone程序的平均功耗为2.8538m W。},
	doi = {10.27012/d.cnki.gdhuu.2022.000609},
	databaseprovider = {CNKI},
}
@MastersThesis{riscv2,
	author = {吕治宽},
	title = {基于verilog和chisel的乱序超标量RISC-V处理器设计比较},
	school = {电子科技大学},
	year = {2022},
	tertiaryauthor = {荣健},
	typeofwork = {硕士},
	keywords = {RISC-V;处理器;乱序超标量;Chisel;敏捷开发},
	abstract = {在过去的几年中,处理器市场一直由专有架构主导,这些架构实现的指令集需要许可和支付费用才能获得使用许可。RISC-V开源指令集的出现,大幅降低了在指令集许可方面的成本。随着数字电路设计规模增加到数百万门,与传统的硬件描述语言技术相比,业界需要一种更有效的数字系统设计方法。该方法可通过降低实现硬件设计的复杂性和减少设计流程中的时间消耗来提高开发人员的生产力。为了降低设计的复杂性,业界提出了将设计空间的抽象水平从寄存器传输级的硬件层面提高到高层次的、面向对象的软件层面,Chisel为这个要求提出了一个可能的解决方案。本文设计了一种乱序超标量流水线处理器,由Verilog和Chisel分别实现,支持RV32I指令集,使用全局分支历史寄存器,具有Gshare分支预测,双指令译码,寄存器重命名,乱序与顺序多发射,重排序缓冲等功能。使用vcs仿真进行功能验证和Xilinx Atrix-7 FPGA进行板级验证。以该处理器为比较样本,通过评估处理器性能、硬件资源利用率、代码密度来比较Verilog和Chisel在实现乱序处理器方面的差异。在本文的研究中,以Dhrystone和Coremark为基准的跑分测试下,Verilog与Chisel实现的性能基本一致,IPC和分支命中率均比较接近,在vivado综合中,Chisel占用的硬件资源更低,LUT与LUTRAM占用数量相比Verilog更少,代码密度方面Chisel相比Verilog增加了接近一倍,并且开发时间也极大缩短,在FPGA板级验证中成功执行了发送的指令并返回正确的数据输出。同时为后摩尔定律时代硬件的敏捷开发方法提供了一定参考。},
	doi = {10.27005/d.cnki.gdzku.2022.004538},
	databaseprovider = {CNKI},
}

@MastersThesis{riscv3,
	author = {邓紫珊},
	title = {基于RISC-V的SoC设计及其RTOS移植},
	school = {电子科技大学},
	year = {2020},
	tertiaryauthor = {翟亚红},
	typeofwork = {硕士},
	keywords = {RISC-V;Rocket Chip;FPGA;物理设计;操作系统移植},
	abstract = {由高级语言编写的程序,通过相应的某种编译器,根据相应的指令集架构,可以被翻译成能被相应的处理器实现(Implementation)所识别的指令。如今我们所能见到的处理器基本上都采用了x86与ARM这两种指令集架构,漫长的发展过程使这两种架构足够成熟,也使得它们难以避免地出现许多问题。不少设计者对x86与ARM架构那过于复杂的指令集、昂贵的商业授权和难以获取的源码颇有微词,在这样的情况下,全新的指令集架构RISC-V逐渐吸引了设计者们的注意。RISC-V提供了免费开源、开发周期较短的处理器实现方案。面对国外芯片的生态和专利壁垒,RISC-V有望成为我国自主研制处理器芯片的一个极好的选择。本次设计主要通过对RISC-V官方提供的参考处理器实现项目Rocket Chip的研究,构建了基于RISC-V的SoC,首先对基于Rocket Chip的SoC的前端设计进行了研究,基于0.13μm工艺,通过逻辑综合和后端物理设计完成了SoC的物理实现,然后由Rocket Chip生成的软件模拟器初步对SoC的功能进行仿真,基于Xilinx ARTY A7开发板,将构建得到的SoC用FPGA实现,并对其进行原型验证,最后在基于FPGA的RISC-V平台上运行了FreeRTOS,实现了RISC-V SoC的操作系统移植。本次设计主要完成了以下工作:1)对Rocket Chip进行了研究。分析研究了Rocket Chip项目的架构,搭建了RISC-V交叉编译工具链,借由Rocket Chip项目生成基于RISC-V的SoC,利用软件模拟器和一个简单的测试程序对其进行软件模拟,初步验证了其功能。2)对构建得到的SoC的后端物理设计进行了研究。利用Design Compiler进行逻辑综合,将设计从RTL代码转换为门级网表,并通过了时序检查和形式验证,然后利用IC Compiler工具完成设计的后端物理设计,并通过了时序检查、物理验证和形式验证,得到最终的设计版图。3)对构建得到的SoC的FPGA实现进行了研究。利用Vivado工具建立工程并对其进行综合,利用Xilinx ARTY A7开发板将其用FPGA实现,并进行原型验证。4)考虑到嵌入式开发常需要实时操作系统来提高开发效率,对RISC-V平台上的操作系统移植进行了研究。基于FreeRTOS项目的源码,编写了一个实例,利用Xilinx ARTY A7开发板实现了基于FPGA的RISC-...},
	doi = {10.27005/d.cnki.gdzku.2020.003684},
	databaseprovider = {CNKI},
}
@MastersThesis{riscv4,
	author = {盛启隆},
	title = {基于RISC-V架构的双发射微处理器设计与实现},
	school = {西安理工大学},
	year = {2019},
	tertiaryauthor = {金宁梅;田泽},
	typeofwork = {硕士},
	keywords = {嵌入式;RISC-V;双发射;分支预测;Cache},
	abstract = {随着嵌入式应用的不断发展,嵌入式微处理器的性能已经受到广泛关注,对于某些特定高效的应用场景,单发射微处理器已经逐渐不能胜任。同时RISC-V作为开源指令集并以其独特的优势已逐渐被广泛采用。因此针对嵌入式应用的特点及问题,开发一款面向嵌入式应用、基于RISC-V架构的双发射微处理器具有重要的价值和意义。通过对嵌入式微处理器性能需求的分析,基于RISC-V架构、采用六级流水结构设计了一款按序发射的双发射微处理器,该微处理器带有分支预测和缓存(Cache),支持RV32IMF指令集。其分支预测采用Gshare预测方案,每个时钟周期都对两条指令进行预测,从而降低分支预测失误率;指令Cache和数据Cache都采用两路组相联的映射方式,替换方式采用最近最少使用替换策略,数据Cache的写操作采用写回策略,Cache组织方式有效地降低了 Cache的缺失率,缩短了微处理器的访存时间。该微处理器采用指令队列将取指和发射分开,提高了处理器的发射效率。此外,该微处理器还包含两套执行单元,其中乘除法和浮点运算单元采用多周期方式实现,使得微处理器能够在正确执行的同时不影响整体的工作频率。在双发射微处理器架构基础上采用System Verilog语言进行了硬件实现,并对其功能进行了仿真,然后采用DMIPS、AES等测试程序对微处理器的性能进行了测试,测试结果表明双发射微处理器的IPC在1左右,分支预测失误率低于10%,指令Cache的缺失率低于1%,数据Cache的缺失率低于5%。然后采用UMC 110nm工艺对双发射微处理器进行了综合,综合结果表明该处理器最高工作频率为142MHz,单元面积为2.66mm2。最后进一步对设计进行了形式验证、物理实现与后仿真。},
	databaseprovider = {CNKI},
}

@MastersThesis{riscv5,
	author = {赵亮凯},
	title = {面向深度学习算法应用的RISC-V处理器研究与优化设计},
	school = {南京航空航天大学},
	year = {2021},
	tertiaryauthor = {吴宁},
	typeofwork = {硕士},
	keywords = {深度学习算法;RISC-V;协处理器;指令相关性;抗功耗攻击},
	abstract = {人工智能与5G等技术的发展使得越来越多的深度学习算法部署在物联网系统中,对物联网设备的AI计算能力提出了新的要求。同时,物联网设备需要采集和处理敏感信息,其安全性面临着严峻的威胁和挑战。因此,研究与设计面向深度学习算法应用且具有自主可控和安全可靠性能的、适用于物联网环境的RISC-V处理器具有重要的现实意义。论文的主要工作是对物联网处理器的深度学习算法支持能力和信息安全性能展开研究,设计支持深度学习算法应用加速、能够检测及去除指令相关性和抗功耗攻击的RISC-V处理器。依据深度学习算法应用的特点,通过电路复用技术设计了定点精度的可重配置神经网络加速器,可通过参数配置实现不同的CNN和LSTM网络算法,以较少的硬件资源达到对深度学习算法应用加速的效果。基于RISC-V架构的可扩展性,设计并实现了可重配置神经网络加速协处理器,并通过扩展协处理器接口将其接入处理器核中,进一步实现对CNN和LSTM网络的指令级加速。针对流水线中指令相关性造成的CPU资源浪费,研究了基于动态调度的相关性去除方法,提出了一种适用于E203内核的指令相关性检测及去除的流水线结构,能有效地减少流水线中的停顿,提高了CPU资源利用率。针对物联网处理器的信息安全性需求,研究了基于功耗随机化的功耗攻击防护技术,提出了一种基于随机指令注入的抗DPA处理器内核结构,以较小的资源消耗实现了对物联网处理器中信息安全的保护。基于Xilinx FPGA对可重配置神经网络算法加速器与神经网络加速协处理器进行资源与性能评估,加速器消耗9357个LUT,含有加速器的E203内核在CNN和LSTM计算能力方面超过了Cortex-A53和Cortex-A7内核;协处理器资源消耗为11094个LUT,使用协处理器指令对卷积运算的加速达到了标准指令集实现的7.29倍。基于Vivado开发环境对指令相关性检测及去除的流水线结构进行时序仿真,在仅增加CPU内核5.24%硬件资源的情况下实现了流水线中指令相关性的去除。基于Synopsys PT工具设计的功耗攻击分析平台对基于随机指令注入的抗DPA处理器内核结构进行功能验证及资源评估,其在增加了CPU内核5.48%硬件资源的情况下能有效防御针对CPU的功耗攻击。},
	doi = {10.27239/d.cnki.gnhhu.2021.000164},
	databaseprovider = {CNKI},
}

@MastersThesis{riscv6,
	author = {姜泽坤},
	title = {支持DSP指令扩展的RISC-V处理器设计与实现},
	school = {重庆邮电大学},
	year = {2021},
	tertiaryauthor = {张红升},
	typeofwork = {硕士},
	keywords = {RISC-V;微处理器;指令扩展;数字信号处理},
	abstract = {RISC-V指令集体系结构是一种精简指令集体系结构,与当今所存在的其他指令集体系结构相比,具有开源免费、开发难度低和扩展性强等特点。本文在RISC-V指令集的基础上完成了一个微处理器内核的设计,并且结合RISC-V的扩展性,实现了用于加速数字信号处理应用的指令扩展。首先,本文基于RISC-V指令集体系结构实现了一个五级流水线的微处理器内核,该处理器内核支持RISC-V指令集体系结构中的I、M、F和C指令集以及机器模式特权。在处理器内核设计完成之后,结合处理器的实际情况,将流水线优化为三、四级变流水线,使处理器内核在不降低性能的前提下资源消耗有所降低。然后,本文对一些常见的数字信号处理应用进行分析并设计出47条新的指令。指令设计完成后,本文对处理器内核和RISC-V工具链进行了修改,使其支持编译中所设计的全部指令。处理器内核和工具链修改完成后进行了简单的测试,结果表明工具链能够编译与反汇编新的指令,且处理器内核可以执行编译后的程序,得出正确结果。最后,基于上述软硬件设计,本设计首先对处理器内核使用RISC-V官方的功能定向测试集和符合性定向测试集进行了测试。测试结果显示除指令地址非对齐测试不通过外,其他测试全部通过,指令地址非对齐测试失败是由于处理器支持压缩指令后不再对16位对齐的地址发出异常。测试完成后对处理器进行FPGA实现,并编写程序使处理器内核能够通过UART串口向外发送数据。然后对处理器内核的通用性能进行测试,结果显示本文中的处理器内核性能要高于ARM的Cortex-M0处理器核和蜂鸟E203处理器核,同时也测得本文中的处理器内核的静态分支预测能够达到70%左右的正确率。最后对扩展的指令进行性能测试,结果显示在32位数据宽度时使用扩展指令后执行卷积操作所需的时间为不使用扩展指令时的30.9%,执行快速傅里叶变换算法时所需时间为不使用扩展指令时的60.4%;在16位数据宽度时使用扩展指令进行执行卷积操作所需的时间为不使用扩展指令时的16.4%。},
	doi = {10.27675/d.cnki.gcydx.2021.000261},
	databaseprovider = {CNKI},
}
@MastersThesis{riscv8,
	author = {毛斌杰},
	title = {用于计量的嵌入式RISC-V处理器设计及MCU实现},
	school = {浙江大学},
	year = {2022},
	tertiaryauthor = {谭年熊},
	typeofwork = {硕士},
	keywords = {RISC-V;嵌入式处理器;快速中断;电能计量;MCU},
	abstract = {在智能电表领域,绝大多数公司选择ARM的Cortex-M系列处理器作为电表芯片的核心控制器件。但是,其作为通用型处理器,没有针对电能计量专用的运算指令,这导致当处理器执行电能计量运算程序时,整体系统能效比并不突出。本文基于开源的RISC-V指令集架构设计了一个专用于电能计量的嵌入式处理器,并构建了一个完整的微控制器(Microcontroller,MCU),主要进行了以下研究和工作:(1)基于RV32IMC架构设计了一个处理器内核,该处理器内核采用五级流水线设计;分析并解决了流水线中可能存在的冲突问题;设计了一条专用于牛顿插值运算的扩展指令,相比于ARM的通用型处理器和普通RISC-V处理器提升了电能计量程序中计算准同步采样信号的运算效率。(2)设计了一个基于RISC-V核本地中断控制器扩展的快速中断响应系统。在标准CLIC的基础上,扩展了硬件自动保存、恢复现场和全局中断硬件屏蔽设计,支持自动的中断嵌套,缩短了中断响应时间,减少了软件的开销。除此之外,还增加了中断尾链设计,进一步提升了处理器响应中断的性能。(3)结合智能电表应用场景,构建了一个完整的电能计量MCU系统。整个系统由RISC-V处理器系统、总线系统和MCU外设三个部分组成。其中处理器内核、调试单元、CLIC和休眠唤醒控制器共同构成了RISC-V处理器。RISCV处理器通过AHB和APB总线以内存映射的方式与存储器和外设进行交互。(4)搭建MCU硬件电路仿真测试平台,对RISC-V处理器和中断系统进行功能测试。本设计的中断响应时间和Cortex-M3的相近,并且比采用标准CLIC的RISC-V处理器减少了近1/3;对比本设计与通用型处理器执行牛顿插值运算程序的时间开销,本设计的时间开销仅为通用型处理器的1/10;将MCU进行逻辑综合并在Xilinx Virtex Ultra Scale VU440 FPGA上实现,处理器的频率上限为76MHz,在FPGA上运行Coremark跑分程序的结果为2.539Coremark/MHz。},
	doi = {10.27461/d.cnki.gzjdx.2022.000990},
	databaseprovider = {CNKI},
}


@MastersThesis{riscv7,
	author = {唐陈辉},
	title = {一种基于RISC-V架构的嵌入式SoC系统设计},
	school = {西安电子科技大学},
	year = {2022},
	tertiaryauthor = {王东;孟庆云},
	typeofwork = {硕士},
	keywords = {RISC-V;六级流水线;SoC;AMBA;FPGA原型验证},
	abstract = {集成电路对于当今快速发展的物联网行业至关重要,而在集成电路中CPU扮演着核心角色。不同应用场景对CPU的性能要求各不相同,目前基于x86架构的处理器由于指令集越发复杂,投入成本高以及研发难度大等原因,使得在嵌入式领域不占优势。而基于ARM指令集架构的处理器,虽然在嵌入式处理器市场占据很大份额,但其前期授权费用和后期版税都很高,而且不能由用户开发,使得个人和组织的开发成本和周期加大。RISC-V指令集架构具有完全免费、架构简单、自定制扩展指令集等特点,在嵌入式SoC(System on Chip)设计中得到了广泛的应用。然而,国内的研究在性能评估上多集中于两三级流水的小规模、低功耗处理器。针对更高级流水架构的研究较少并且对适用于嵌入式领域的RV32C压缩指令集架构的研究同样很少。首先,本文通过对RISC-V指令集架构以及流水线架构的深入研究,在研究传统五级单发射流水线架构的基础上,充分考虑RISC-V的静态分支预测机制以及流水线延迟的平衡问题,提出六级流水线设计方案。该方案在传统五级流水的取指阶段,增加一级静态预测功能,也就是说取指阶段为两级,其他阶段保持不变,从而提高流水线在预测阶段的处理速度。在此六级流水线架构的基础上,对所有指令进行时钟节拍分析,据此进行模块功能划分及设计,并最终实现搭载AMBA AHB-Lite总线且基于RV32IMCZicsr指令集架构的处理器。同时,设计采用参数化设计,所有指令集架构可配置,为满足嵌入式系统应用,还可实现RV32E指令集。处理器架构配有PLIC(Platform-Level Interrupt Controller)平台级中断控制器以及CLINT(Core Local Interruptor)内核本地中断器,支持具有7个优先级的40个中断源。基于自主设计的处理器内核,自主设计完成APB桥以及基于AMBA APB总线的GPIO、USART、SPI、PWM和IWDG外设,最终搭建一个嵌入式SoC系统。其次,仿真测试平台利用RISC-V交叉编译工具riscv-gnu-toolchain及C代码进行验证,编写相关的功能测试C代码,用交叉编译工具生成hex文件,并且通过Python脚本解析出指令码并将其装载至ROM中对处理器内核以及外设模块进行仿真测试,并对其进行FPGA原型验证。最后,通过Synopsys公司开发的DC综合工具,在基于SMIC 0.18μm工艺库完成RISC-V处...},
	doi = {10.27389/d.cnki.gxadu.2022.000521},
	databaseprovider = {CNKI},
}

