@MastersThesis{riscv1,
	author = {顾梦杰},
	title = {基于RISC-V指令集架构的通用微控制器设计},
	school = {东华大学},
	year = {2022},
	tertiaryauthor = {伍滨和},
	typeofwork = {硕士},
	keywords = {RISC-V;微控制器;处理器微架构;FPGA},
	abstract = {随着全球化“缺芯”潮的持续以及中美贸易战的愈演愈烈,实现微控制器(Microcontroller Unit,MCU)这一基础芯片产品的自主化不仅是维持社会、经济正常发展的重要前提,更是维护国家安全的基本保障。在此背景下,本文基于完全开源开放的第五代精简指令集架构——RISC-V,设计了一款面向低功耗嵌入式场景的微控制器。本课题首先完成了一款支持RV32IMC指令集的MCU核心处理器。该处理器基于两级变长流水线,支持静态分支预测,并配备了独立的高性能乘、除法模块。处理器总线接口采用ARM公司AMBA 5总线协议所定义的AHB-Lite总线,具有较好的兼容性与可扩展性。同时该处理器还支持由Si Five公司0.11版RISC-V系统调试方案所定义的调试模式,通过与So C中的调试模块配合能够支持系统调试与程序烧录。在完成核心设计的基础上,本课题使用AHB-Lite总线替换了开源蜂鸟E203项目的So C系统高速总线,并完成了上述So C与本课题所设计核心处理器的集成,实现了一款具有完整功能的低功耗MCU。完成微架构设计后,本课题搭建了Testbench测试平台。通过运行RISC-V官方提供的“I”、“M”、“C”指令集测试程序以及由C语言编写的Hello World程序,初步验证了所设计MCU对RISC-V架构程序的执行能力以及对中断、异常的处理能力。完成软件仿真的基础上,本课题还通过硬件实现进一步测试、评估此次设计。首先进行FPGA原型验证,运行了由C语言编写的功能测试程序以及Dhrystone、Core Mark跑分程序。在验证本设计硬件实现后功能正确性的基础上测试了设计的性能表现。本次设计获得了1.46 DMIPS/MHz以及2.7 Core Mark/MHz的跑分成绩,性能介于ARM Cortex-M23与ARM Cortex-M3之间。最后还基于中芯国际55纳米工艺完成了本次设计微控制器核心的硬件综合。在125MHz的时序约束下,本次设计的MCU核心处理器共包含22949个cell,cell总面积为50259。在1.08V电压下运行Dhrystone程序的平均功耗为2.8538m W。},
	doi = {10.27012/d.cnki.gdhuu.2022.000609},
	databaseprovider = {CNKI},
}
@MastersThesis{riscv2,
	author = {吕治宽},
	title = {基于verilog和chisel的乱序超标量RISC-V处理器设计比较},
	school = {电子科技大学},
	year = {2022},
	tertiaryauthor = {荣健},
	typeofwork = {硕士},
	keywords = {RISC-V;处理器;乱序超标量;Chisel;敏捷开发},
	abstract = {在过去的几年中,处理器市场一直由专有架构主导,这些架构实现的指令集需要许可和支付费用才能获得使用许可。RISC-V开源指令集的出现,大幅降低了在指令集许可方面的成本。随着数字电路设计规模增加到数百万门,与传统的硬件描述语言技术相比,业界需要一种更有效的数字系统设计方法。该方法可通过降低实现硬件设计的复杂性和减少设计流程中的时间消耗来提高开发人员的生产力。为了降低设计的复杂性,业界提出了将设计空间的抽象水平从寄存器传输级的硬件层面提高到高层次的、面向对象的软件层面,Chisel为这个要求提出了一个可能的解决方案。本文设计了一种乱序超标量流水线处理器,由Verilog和Chisel分别实现,支持RV32I指令集,使用全局分支历史寄存器,具有Gshare分支预测,双指令译码,寄存器重命名,乱序与顺序多发射,重排序缓冲等功能。使用vcs仿真进行功能验证和Xilinx Atrix-7 FPGA进行板级验证。以该处理器为比较样本,通过评估处理器性能、硬件资源利用率、代码密度来比较Verilog和Chisel在实现乱序处理器方面的差异。在本文的研究中,以Dhrystone和Coremark为基准的跑分测试下,Verilog与Chisel实现的性能基本一致,IPC和分支命中率均比较接近,在vivado综合中,Chisel占用的硬件资源更低,LUT与LUTRAM占用数量相比Verilog更少,代码密度方面Chisel相比Verilog增加了接近一倍,并且开发时间也极大缩短,在FPGA板级验证中成功执行了发送的指令并返回正确的数据输出。同时为后摩尔定律时代硬件的敏捷开发方法提供了一定参考。},
	doi = {10.27005/d.cnki.gdzku.2022.004538},
	databaseprovider = {CNKI},
}

@MastersThesis{riscv3,
	author = {邓紫珊},
	title = {基于RISC-V的SoC设计及其RTOS移植},
	school = {电子科技大学},
	year = {2020},
	tertiaryauthor = {翟亚红},
	typeofwork = {硕士},
	keywords = {RISC-V;Rocket Chip;FPGA;物理设计;操作系统移植},
	abstract = {由高级语言编写的程序,通过相应的某种编译器,根据相应的指令集架构,可以被翻译成能被相应的处理器实现(Implementation)所识别的指令。如今我们所能见到的处理器基本上都采用了x86与ARM这两种指令集架构,漫长的发展过程使这两种架构足够成熟,也使得它们难以避免地出现许多问题。不少设计者对x86与ARM架构那过于复杂的指令集、昂贵的商业授权和难以获取的源码颇有微词,在这样的情况下,全新的指令集架构RISC-V逐渐吸引了设计者们的注意。RISC-V提供了免费开源、开发周期较短的处理器实现方案。面对国外芯片的生态和专利壁垒,RISC-V有望成为我国自主研制处理器芯片的一个极好的选择。本次设计主要通过对RISC-V官方提供的参考处理器实现项目Rocket Chip的研究,构建了基于RISC-V的SoC,首先对基于Rocket Chip的SoC的前端设计进行了研究,基于0.13μm工艺,通过逻辑综合和后端物理设计完成了SoC的物理实现,然后由Rocket Chip生成的软件模拟器初步对SoC的功能进行仿真,基于Xilinx ARTY A7开发板,将构建得到的SoC用FPGA实现,并对其进行原型验证,最后在基于FPGA的RISC-V平台上运行了FreeRTOS,实现了RISC-V SoC的操作系统移植。本次设计主要完成了以下工作:1)对Rocket Chip进行了研究。分析研究了Rocket Chip项目的架构,搭建了RISC-V交叉编译工具链,借由Rocket Chip项目生成基于RISC-V的SoC,利用软件模拟器和一个简单的测试程序对其进行软件模拟,初步验证了其功能。2)对构建得到的SoC的后端物理设计进行了研究。利用Design Compiler进行逻辑综合,将设计从RTL代码转换为门级网表,并通过了时序检查和形式验证,然后利用IC Compiler工具完成设计的后端物理设计,并通过了时序检查、物理验证和形式验证,得到最终的设计版图。3)对构建得到的SoC的FPGA实现进行了研究。利用Vivado工具建立工程并对其进行综合,利用Xilinx ARTY A7开发板将其用FPGA实现,并进行原型验证。4)考虑到嵌入式开发常需要实时操作系统来提高开发效率,对RISC-V平台上的操作系统移植进行了研究。基于FreeRTOS项目的源码,编写了一个实例,利用Xilinx ARTY A7开发板实现了基于FPGA的RISC-...},
	doi = {10.27005/d.cnki.gdzku.2020.003684},
	databaseprovider = {CNKI},
}
@MastersThesis{riscv4,
	author = {盛启隆},
	title = {基于RISC-V架构的双发射微处理器设计与实现},
	school = {西安理工大学},
	year = {2019},
	tertiaryauthor = {金宁梅;田泽},
	typeofwork = {硕士},
	keywords = {嵌入式;RISC-V;双发射;分支预测;Cache},
	abstract = {随着嵌入式应用的不断发展,嵌入式微处理器的性能已经受到广泛关注,对于某些特定高效的应用场景,单发射微处理器已经逐渐不能胜任。同时RISC-V作为开源指令集并以其独特的优势已逐渐被广泛采用。因此针对嵌入式应用的特点及问题,开发一款面向嵌入式应用、基于RISC-V架构的双发射微处理器具有重要的价值和意义。通过对嵌入式微处理器性能需求的分析,基于RISC-V架构、采用六级流水结构设计了一款按序发射的双发射微处理器,该微处理器带有分支预测和缓存(Cache),支持RV32IMF指令集。其分支预测采用Gshare预测方案,每个时钟周期都对两条指令进行预测,从而降低分支预测失误率;指令Cache和数据Cache都采用两路组相联的映射方式,替换方式采用最近最少使用替换策略,数据Cache的写操作采用写回策略,Cache组织方式有效地降低了 Cache的缺失率,缩短了微处理器的访存时间。该微处理器采用指令队列将取指和发射分开,提高了处理器的发射效率。此外,该微处理器还包含两套执行单元,其中乘除法和浮点运算单元采用多周期方式实现,使得微处理器能够在正确执行的同时不影响整体的工作频率。在双发射微处理器架构基础上采用System Verilog语言进行了硬件实现,并对其功能进行了仿真,然后采用DMIPS、AES等测试程序对微处理器的性能进行了测试,测试结果表明双发射微处理器的IPC在1左右,分支预测失误率低于10%,指令Cache的缺失率低于1%,数据Cache的缺失率低于5%。然后采用UMC 110nm工艺对双发射微处理器进行了综合,综合结果表明该处理器最高工作频率为142MHz,单元面积为2.66mm2。最后进一步对设计进行了形式验证、物理实现与后仿真。},
	databaseprovider = {CNKI},
}

